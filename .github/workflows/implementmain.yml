name: emoji_branch_WF

on: 
  workflow_dispatch:
    inputs:
      branch:
        description: 'Git branch name to checkout'  
        default: 'main' 
        type: choice
        options:
          - main
          - develop
          - feature/*
      universe:
        description: 'Universe to deploy'
        default: 'ci'
        type: choice
        options:
          - ci
          - cert
          - anon
          - uat
          - bazaar
                      
      # ApiKey:
      #   description: 'API Key value'
      #   type: string
      #   required: true
        
      # AccessToken:
      #   description: 'Access Token value' 
      #   type: string
      #   required: true
        
      # DatadogKey:
      #   description: 'Datadog Key value'
      #   type: string
      #   required: true
      # AccessToken=${{github.event.inputs.AccessToken }} \
      # DatadogKey=${{ github.event.inputs.DatadogKey }} \
      # ApiKey=${{github.event.inputs.ApiKey }} \


env:
  ENVIRONMENT_TAG: ${{github.event.inputs.universe}}
  STACK_NAME: ${{github.event.inputs.universe}}-emoji-secret
  AWS_REGION: us-east-1
  TEAM: emodb-dev@bazaarvoice.com
  SERVICE: emoji
  DATATYPE: client+personal
  # SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  secretsjenkinfile:
    runs-on: ubuntu-latest

    steps:

      - name: Load VPC data
        id: vpc
        uses: actions/github-script@v5
        env:
          ENVIRONMENT_TAG: ${{ env.ENVIRONMENT_TAG}}
        with:
          script: |
            const vpcData = {
              "ci": {"vpc_id": "ci-vpc-id"},
              "cert": {"vpc_id": "cert-vpc-id"},
              "anon": {"vpc_id": "anon-vpc-id"},
              "uat": {"vpc_id": "uat-vpc-id"},
              "bazaar": {"vpc_id": "bazaar-vpc-id"},
              // Add other environments as needed
            };
            core.setOutput('vpc_id', vpcData[process.env.ENVIRONMENT_TAG].vpc_id)

      - name: Load Account Data
        id: accountid
        uses: actions/github-script@v5
        env:
          ENVIRONMENT_TAG: ${{ env.ENVIRONMENT_TAG}}
        with:
          script: |
            const accId = {
              "ci": {"acc_id": "549050352176"},
              "cert": {"acc_id": "cert-acc-id"},
              "anon": {"acc_id": "anon-acc-id"},
              "uat": {"acc_id": "uat-acc-id"},
              "bazaar": {"acc_id": "bazaar-acc-id"},
              // Add other environments as needed
            };
            core.setOutput('acc_id', accId[process.env.ENVIRONMENT_TAG].acc_id)
      
        
      - name: environment_print
        run: echo ${{github.event.inputs.universe}}

      - name: branch_print
        run: |
          echo ${{github.event.inputs.branch}}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{steps.accountid.outputs.acc_id}}:role/emojigitrole
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Secrets
        run: |
          cd ops/cfn
          aws cloudformtion deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file secrets.cfn.yml \
            --region ${{ env.AWS_REGION }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Universe=${{ github.event.inputs.universe}} \
              
            --tags \
              bv:nexus:team=${{ env.TEAM }} \
              bv:nexus:vpc=${{ steps.vpc.outputs.vpc_id }}  \
              bv:system=emodb \
              bv:nexus:service=${{ env.SERVICE }} \
              bv:nexus:owner=${{ env.TEAM }} \
              bv:nexus:costcenter=${{ env.TEAM }} \
              bv:nexus:datatype=${{ env.DATATYPE }} \
              bv:nexus:env=${{ steps.vpc.outputs.vpc_id  }}

  
      # - name: Send success notification
      #   if: success()
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}  
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     author_name: GitHub Action
      #     fields: repo,message,commit,author,action
      #     text: 'Build #${{ github.run_number }} succeeded'  
          

      # - name: Send failure notification
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     author_name: GitHub Action
      #     fields: repo,message,commit,author,action
      #     text: 'Build #${{ github.run_number }} failed'