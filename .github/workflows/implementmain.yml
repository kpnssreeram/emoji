name: emoji_branch_WFs
on: 
  workflow_dispatch:
    inputs:
      branch:
        description: 'Git branch name to checkout'  
        default: 'main' 
        type: choice
        options:
          - main
          - kpnssbranch
          - feature/**
      Universe:
        description: 'Universe to deploy'
        default: 'ci'
        type: choice
        options:
          - ci
          - cert
          - anon
          - uat
          - bazaar
      aws_environment:
        description: 'Which environment to deploy'
        default: 'qa'
        type: choice
        options:
          - qa
          - prod
      
                      
      ApiKey:
        description: 'API Key value'
        type: string
        required: false
        
      AccessToken:
        description: 'Access Token value' 
        type: string
        required: false
        
      # DatadogKey:
      #   description: 'Datadog Key value'
      #   type: string
      #   required: true
      
      # DatadogKey=${{ github.event.inputs.DatadogKey }} \  need to add in deploy section


env:
  # ENVIRONMENT_TAG: ${{github.event.inputs.Universe}}  Do it laterss
  AWS_ENVIRONMENT: ${{ github.event.inputs.aws_environment}}
  STACK_NAME: ${{github.event.inputs.Universe}}-emoji-secret-test
  AWS_REGION: us-east-1
  TEAM: emodb-dev@bazaarvoice.com
  #SERVICE: emoji
  DATATYPE: client+personal
  # SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  secretsjenkinfile:
    runs-on: ubuntu-latest
    environment: testenv
    # timeout-minutes: 10
    # strategy:
    #   fail-fast: false

    steps:
      - name: Git Checkout 
        uses: actions/checkout@v4
      - name: testenv print
        run: echo "${{vars.QA}"
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: mask ApiKey
        run: |
          API_PASSWORD=$(jq -r '.inputs.ApiKey' $GITHUB_EVENT_PATH)
          echo ::add-mask::$API_PASSWORD
          echo API_PASSWORD=$API_PASSWORD >> $GITHUB_ENV
      - name: mask AccessToken
        run: |
          Access_Token=$(jq -r '.inputs.AccessToken' $GITHUB_EVENT_PATH)
          echo ::add-mask::$Access_Token
          echo Access_Token=$Access_Token >> $GITHUB_ENV
      - name: print masking apikey and accessToken and 
        run: 
          echo "${{env.API_PASSWORD}} is api key and ${{env.Access_Token}} is access token and global variable is ${{vars.SERVICE}}"


      # - name: Load VPC data
      #   id: vpc
      #   uses: actions/github-script@v5
      #   env:
      #     ENVIRONMENT_TAG: ${{ env.ENVIRONMENT_TAG}}
      #   with:
      #     script: |
      #       const vpcData = {
      #         "ci": {"vpc_id": "ci-vpc-id"},
      #         "cert": {"vpc_id": "cert-vpc-id"},
      #         "anon": {"vpc_id": "anon-vpc-id"},
      #         "uat": {"vpc_id": "uat-vpc-id"},
      #         "bazaar": {"vpc_id": "bazaar-vpc-id"},
      #         // Add other environments as needed
      #       };
      #       core.setOutput('vpc_id', vpcData[process.env.ENVIRONMENT_TAG].vpc_id)

      - name: Load Env Account Id
        id: accountid
        uses: actions/github-script@v5
        env:
          AWS_ENVIRONMENT: ${{ env.AWS_ENVIRONMENT}}
        with:
            script: |
              const awsenv = {
                "qa": {"env_acc_id": "549050352176"},
                "prod": {"env_acc_id": "468552248569"},
                // Add other environments as needed
              };
              core.setOutput('env_acc_id', awsenv[process.env.AWS_ENVIRONMENT].env_acc_id)
      
        
      # - name: Universe_print
      #   run: echo ${{github.event.inputs.Universe}}

      # - name: branch_print
      #   run: |
      #     run: echo ${{github.event.inputs.branch}}

      - name: All_inputs_print
        run: |
          echo "The Uninverse is ${{github.event.inputs.Universe}} and Branch is ${{github.event.inputs.branch}} and AWS \
          Env is ${{github.event.inputs.aws_environment}}. "

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{steps.accountid.outputs.env_acc_id}}:role/emojigitrole
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Secrets
        run: |
          cd ops/cfn
          ls
          aws cloudformation deploy \
          --stack-name ${{ env.STACK_NAME }} \
          --template-file secrets.cfn.yml \
          --region ${{ env.AWS_REGION }} \
          --capabilities CAPABILITY_IAM \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            Universe=${{ github.event.inputs.Universe }} \
            AccessToken=${{ env.Access_Token }} \
            ApiKey=${{ env.API_PASSWORD }} \
          --tags \
            bv:nexus:team=${{ env.TEAM }} \
            bv:nexus:vpc=1233 \
            bv:system=emodb \
            bv:nexus:service=${{vars.SERVICE}} \
            bv:nexus:owner=${{ env.TEAM }} \
            bv:nexus:costcenter=${{ env.TEAM }} \
            bv:nexus:datatype=${{ env.DATATYPE }} \
            bv:nexus:env=1234

    
          



      # - name: Send success notification
      #   if: success()
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}  
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     author_name: GitHub Action
      #     fields: repo,message,commit,author,action
      #     text: 'Build #${{ github.run_number }} succeeded'  
          

      # - name: Send failure notification
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     author_name: GitHub Action
      #     fields: repo,message,commit,author,action
      #     text: 'Build #${{ github.run_number }} failed'
